Design Document

The initial motivation behind my project was to create an interface where it is possible to monitor different services that are relevant to any of my ongoing coding projects, either personal or job-related.  Although it is often possible to sign up for email notifications for services such as Github (version control), CircleCI (continuous integration), or JIRA (issue tracker), it would be convenient to be able to see all of this information in a single location without the need for a page refresh.  These requirements determined the structure of my application.  In order to listen for events in the services that I was interested in monitoring, my plan was to create an API endpoint capable of understanding that data and storing it so that it could be displayed in the desired user interface.  For the frontend, I wanted to create something relatively simple that would update to display any new events in real-time in a single-page application.  Although I only ended up implementing an interface to listen for pull-request-related events originating in Github, the foundation is set to add any platform that can utilize webhook integrations.
To interface with the webhooks associated with the services mentioned above, I chose to write an API using the Ruby on Rails MVC framework.  Although I do not need any of the model or view functionality, using this technology was a very simple way to set up a controller to accept these POST requests.  Once the controller receives this data, I utilize a serializer to process the incoming data and produce a set of parameters that include the relevant fields to be stored in the database and will eventually be read by the view portion of the application.  The last step in the API is to actually store the data, using a gem that provides a wrapper for the HTTP POST or PUT request to a cloud-based database called Firebase.
I chose to write my data to a Firebase Realtime Database, which stores data in the JSON format.  The reason why I decided to utilize this technology is because it provides a way to give real-time updates to any users reading that database.  Although Firebase is not a relational database, the data that I will be storing would not benefit from that in the current iteration since the entries are basically independent.  However, I did implement a database rule that indexes the entries based on the ID of the pull request in Github, which is stored in the database to identify whether it should create or update an entry in the database.  In addition, since I plan to utilize the data in a Javascript frontend framework, it is convenient to store the data as JSON since that is how it will be used down the pipeline.  The documentation is relatively easy to understand, and it abstracts away the means by which the data synchronization occurs.
In order to create a single-page user experience, I decided to use the ReactJS Javascript library.  The primary motivation behind this technology was to gain some experience with a framework that is currently very popular.  In addition, it fit the design goals of the project very well since it is able to render changes to the Document Object Model without requiring a page refresh.  For the most part, my JSX code is fairly straightforward, with each item in the list acting as a component of the list, and then the list acting in turn as a component of the entire board.  this design would enable new lists to be easily added to the board in the future.  In addition, for some visual enhancements, I have used both the Foundation library to implement an accordion dropdown list and the Octicon library released by Github to provide some well-known icons to represent the states that I would like to show in the user interface.
While there are a number of ways that this project could be expanded, particularly in security and authentication, I have laid the groundwork for those features, as well as other third-party webhook events, to be incorporated into a real-time, single-page interface.
